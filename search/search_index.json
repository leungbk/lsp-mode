{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Language Server Protocol Support for Emacs # Why? # \u2764\ufe0f Community Driven \ud83d\udc8e Fully featured - supports all features in Language Server Protocol v3.14. \ud83d\ude80 Fast - see performance section \ud83c\udf1f Flexible - choose between full-blown IDE with flashy UI or minimal distraction free \u2699 Easy to configure - works out of the box and automatically upgrades if additional packages are present Overview # Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company , flycheck and projectile . Non-blocking asynchronous calls Real-time Diagnostics/linting via flycheck (recommended) or flymake when Emacs > 26 (requires flymake>=1.0.5) Code completion - company-capf / completion-at-point (note that company-lsp is no longer supported). Hovers - using lsp-ui Code actions - using lsp-execute-code-action or lsp-ui sideline. Code outline - using builtin imenu or helm-imenu Code navigation - using builtin xref , lsp-treemacs tree views or lsp-ui peek functions. Code lens Symbol highlights Formatting Debugger - dap-mode Helm integration - helm-lsp Ivy integration - lsp-ivy Treemacs integration - lsp-treemacs Semantic highlighting (as currently implemented by JDT LS and unreleased builds of clangd, cf. Semantic highlighting spec ) which-key integration for better discovery Presentations/demos # skybert 's emacsconf presentation (Java) thatwist 's ScalaUA Conference presentation (Scala) Installation # Install via melpa # The recommended way to install lsp-mode is via package.el - the built-in package manager in Emacs. lsp-mode is available on the two major package.el community maintained repos - MELPA Stable and MELPA . M-x package-install [RET] lsp-mode [RET] Configuration # Install language server # Check the table below with the list of supported servers and the corresponding instructions on how to install the server. Configure lsp-mode # Vanilla Emacs You could go minimal and use lsp-mode as it is without external packages with the built-in flymake and completion-at-point or you could install the following extensions for better experience: install lsp-ui for fancy sideline, popup documentation, VScode-like peek UI, etc. install flycheck if you prefer the more popular flycheck over renewed flymake . lsp-mode will automatically pick it up. install company-mode for completion popups. install lsp-treemacs for various tree based UI controls (symbols, errors overview, call hierarchy, etc.) install helm-lsp provides on type completion alternative of xref-apropos using helm . install lsp-ivy provides on type completion alternative of xref-apropos using ivy . install dap-mode if your language is supported by the debugger. ;; if you want to change prefix for lsp-mode keybindings. ( setq lsp-keymap-prefix \"s-l\" ) ( require 'lsp-mode ) ( add-hook 'XXX-mode-hook #' lsp ) where XXX could be major mode like python , java , c++ . Alternatively, if you want to minimize you configuration you may use prog-mode-hook . In case you do that, lsp will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, lsp-mode will automatically detect and configure lsp-ui and company-lsp . To turn off that behavior you could set lsp-auto-configure to nil . To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( add-hook 'XXX-mode-hook #' lsp-deferred ) Spacemacs lsp-mode is included in spacemacs develop branch. Add lsp to dotspacemacs-configuration-layers and configure the language that you want to use to be backed by lsp backend. use-package Replace (require 'lsp-mode) with the following if you use use-package. ;; set prefix for lsp-command-keymap (few alternatives - \"C-l\", \"C-c l\") ( setq lsp-keymap-prefix \"s-l\" ) ( use-package lsp-mode :hook ( ;; replace XXX-mode with concrete major-mode(e. g. python-mode) ( XXX-mode . lsp ) ;; if you want which-key integration ( lsp-mode . lsp-enable-which-key-integration )) :commands lsp ) ;; optionally ( use-package lsp-ui :commands lsp-ui-mode ) ;; if you are helm user ( use-package helm-lsp :commands helm-lsp-workspace-symbol ) ;; if you are ivy user ( use-package lsp-ivy :commands lsp-ivy-workspace-symbol ) ( use-package lsp-treemacs :commands lsp-treemacs-errors-list ) ;; optionally if you want to use debugger ( use-package dap-mode ) ;; (use-package dap-LANGUAGE) to load the dap adapter for your language ;; optional if you want which-key integration ( use-package which-key :config ( which-key-mode )) To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( use-package lsp-mode :hook ( XXX-mode . lsp-deferred ) :commands ( lsp lsp-deferred )) Recommended settings for lsp-mode related packages company ( setq company-minimum-prefix-length 1 company-idle-delay 0.0 ) ;; default is 0.2 Formatting In general the formatter settings are language server specific(e. g. JDT LS uses eclipse formatter file and lsp-java-format-settings-url to configure it while clangd uses clangd-format ). The only settings that are controlled on lsp-mode level are indent size and whether the server should use tabs or spaces. Use c-basic-offset for cc-mode derived moves(e. g. java, C++) to control the tab size. Use tab-width for any other mode to do the same. Use indent-tabs-mode for selecting tab/spaces. Docker Refer to lsp-docker README which provides a guide on how you can run lsp-mode in docker container. Performance # Use M-x lsp-diagnose to validate if your lsp-mode is properly configured. In the section below, you could find description for each of the checks: When configured properly lsp-mode 's performance is on par with mainstream LSP clients (e. g. VScode , Theia , etc). Here are steps to achieve optimal results. Use Emacs 27+ with native json support. In order to validate that you match this criteria do M-: (functionp 'json-serialize) RET . Benchmarks show that Emacs 27 is ~15 times faster than Emacs when using Elisp json parser implementation. Adjust gc-cons-threshold . The default setting is too low for lsp-mode 's needs due to the fact that client/server communication generates a lot of memory/garbage. You have two options: Set it to big number(100mb) like most of the popular starter kits like Spacemacs/Doom/Prelude, etc do: ( setq gc-cons-threshold 100000000 ) Follow the method recommended by Gnu Emacs Maintainer Eli Zaretskii: \"My suggestion is to repeatedly multiply gc-cons-threshold by 2 until you stop seeing significant improvements in responsiveness, and in any case not to increase by a factor larger than 100 or somesuch. If even a 100-fold increase doesn't help, there's some deeper problem with the Lisp code which produces so much garbage, or maybe GC is not the reason for slowdown.\" Source: https://www.reddit.com/r/emacs/comments/brc05y/is_lspmode_too_slow_to_use_for_anyone_else/eofulix/ Increase the amount of data which Emacs reads from the process. Again the emacs default is too low 4k considering that the some of the language server responses are in 800k - 3M range. ( setq read-process-output-max ( * 1024 1024 )) ;; 1mb Optional: use company-capf . Although company-lsp also supports caching lsp-mode 's company-capf does that by default. To achieve that uninstall company-lsp or put these lines in your config: ( setq lsp-prefer-capf t ) Note: - to verify which company backend implementation you are using do M-x company-diag when performing auto-completion. Optional: Disable lsp-ui . Normally, lsp-ui is very fast but in some systems (especially when using Windows ) lsp-ui overlays and popups might slow down emacs. Optional: fine-tune lsp-idle-delay . This variable determines how often lsp-mode will refresh the highlights, lenses, links, etc while you type. ( setq lsp-idle-delay 0.500 ) Reporting performance problems If you have tried all of the non-optional steps from the list and emacs is still not very responsive please open a PR with the following information: Collect lsp-log data after setting lsp-print-performance to t . ( setq lsp-print-performance t ) Include emacs performance report. Use the following step to collect it: M-x profiler-start and select CPU Reproduce the slow behavior. M-x profiler-stop In the profiler report expand all nodes by doing C-u TAB . Note: - lsp-mode is just a frontend and the performance depends on server as well. Some servers (e. g. Palantir's Python Language Server) might be slow when performing auto-completion. How does it work? # lsp-mode has predefined list of server configurations (loaded in lsp-clients.el ) containing a mapping from major-mode to the server configuration or by using activation function. In addition to the default server configuration located in lsp-clients.el there are few languages servers which require separate package(check Supported languages ). When you open a file from a particular project lsp-mode and call lsp command lsp-mode will look for server registrations able to handle current file. If there is such client lsp-mode will look for the project root. If you open a file from the project for the first time you will be prompted to define the current project root. Once the project root is selected it is saved in lsp-session file and it will be loaded the next time you start Emacs so you no longer will be asked for a project root when you open a file from that project. Later if you want to change the project root you may use lsp-workspace-folder-remove to remove the project and call lsp-workspace-folder-add to add the root. If you want to force starting a particular language server in a file you may use C-u M-x lsp which will prompt you to select language server to start. Supported languages # Some of the servers are directly supported by lsp-mode by requiring lsp-clients.el while others require installing additional packages which provide server specific functionality. Language Language Server Built-in Installation command Debugger Ada ada languageserver Yes Installation instructions Yes (gdb) Angular vscode-ng-language-service Yes Installation instructions Not relevant Bash bash-language-server Yes npm i -g bash-language-server C++ ccls emacs-ccls ccls Yes (gdb or lldb) C++ clangd Yes clangd Yes (gdb or lldb) C++ cquery emacs-cquery cquery Yes (gdb or lldb) C# OmniSharp-Roslyn Yes OmniSharp-Roslyn No Clojure clojure-lsp Yes clojure-lsp CMake cmake-language-server Yes pip install cmake-language-server Not relevant Crystal scry Yes scry CSS/LessCSS/SASS/SCSS css Yes npm install -g vscode-css-languageserver-bin Dart dart analysisserver lsp-dart built into dart-sdk Yes Dhall dhall-lsp-server Yes Installation instructions No Dockerfile dockerfile-language-server-nodejs Yes npm install -g dockerfile-language-server-nodejs Elixir elixir-lsp/elixir-ls Yes elixir-lsp/elixir-ls Yes Elixir elixir-ls Yes elixir-ls Yes Elm elmLS Yes npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions No Erlang erlang ls Yes erlang ls Eslint eslint Yes LSP ESLint Guide N/A F# fsautocomplete Yes Automatic by lsp-fsharp No Fortran fortran-language-server Yes pip install fortran-language-server Yes Go gopls Yes go get golang.org/x/tools/gopls@latest docs Yes Go bingo Yes bingo Yes Groovy groovy-language-server Yes groovy-language-server Hack hhvm Yes hhvm HTML html Yes npm install -g vscode-html-languageserver-bin Haskell IDE engine lsp-haskell IDE engine Lua EmmyLua Yes Installation Java Eclipse JDT LS lsp-java Automatic by lsp-java Yes JavaScript/TypeScript typescript-language-server (recommended) Yes npm i -g typescript-language-server; npm i -g typescript Yes (Firefox/Chrome) JavaScript/TypeScript javascript-typescript-stdio Yes npm i -g javascript-typescript-langserver Yes (Firefox/Chrome) JavaScript Flow flow (add-on if working on a Flow file) Yes flow Yes (Firefox/Chrome) Json vscode-json-languageserver Yes Automatic or manual by npm i -g vscode-json-languageserver Julia lsp-julia lsp-julia LanguageServer.jl Kotlin kotlin-language-server Yes kotlin-language-server Nim nimlsp Yes nimble install nimlsp No OCaml ocaml-language-server Yes ocaml-language-server OCaml ocaml-lsp-server Yes ocaml-lsp-server Pascal/Object Pascal pascal-language-server lsp-pascal pascal-language-server No Perl Perl::LanguageServer Yes cpanm Perl::LanguageServer PHP(recommended) intelephense Yes npm i intelephense -g Yes PHP php-language-server Yes php-language-server Yes Powershell PowerShellEditorServices Yes Automatic Yes PureScript purescript-language-server Yes npm i purescript-language-server No Python pyls Yes pip install 'python-language-server[all]' Yes Python(Microsoft) Microsoft Python Language Server lsp-python-ms lsp-python-ms Yes R languageserver Yes install.packages(\"languageserver\") No Ruby solargraph Yes gem install solargraph Yes Rust rls Yes rls Yes Rust rust-analyzer Yes rust-analyzer Scala Metals Yes Metals Swift sourcekit-LSP lsp-sourcekit sourcekit-LSP Yes (via llvm debug adapter) Terraform terraform-lsp No Git clone outside of $GOPATH ; go install. (Requires go > 1.11) No TeX, LaTeX, etc. Digestif Yes luarocks \\-\\-server http://luarocks.org/dev install digestif TeX, LaTeX, etc. texlab Yes cargo install \u2013git https://github.com/latex-lsp/texlab.git TeX, LaTeX, etc. texlab lsp-latex cargo install \u2013git https://github.com/latex-lsp/texlab.git Verilog/SystemVerilog hdl checker Yes pip install hdl-checker \u2013upgrade No VHDL VHDL Tool Yes Download from http://www.vhdltool.com/download No Vimscript vim-language-server Yes npm install -g vim-language-server n/a Vue vue-language-server Yes npm install -g vls Yes (Firefox/Chrome) XML lsp4xml Yes Download from lsp4xml releases YAML yaml Yes npm install -g yaml-language-server Commands # When using lsp-mode most of the features depend on server capabilities. lsp-mode provides default bindings which are dynamically enabled/disabled based on the server functionality. All the commands are configured lsp-command-map which is bound to lsp-keymap-prefix (default s-l ). Keybinding Description s-l s s Entry point for the server startup. s-l s r Restart language server s-l s q Shutdown language server s-l s d Describes current session s-l s D Disconnect the buffer from the language server keeping the server running. s-l = = Ask the server to format this document. s-l = r Ask the server to format the region, or if none is selected, the current line. s-l F a Add new project root to the list of workspace folders. s-l F r Remove project root from the list of workspace folders. s-l F b Remove project root from the workspace blacklist. s-l T l Toggle code-lens overlays. s-l T L Toggle client-server protocol logging. s-l T h Toggle symbol highlighting. s-l T S Toggle minor mode for showing information for current line in sideline. (requires lsp-ui ) s-l T d Toggle minor mode for showing hover information in child frame. (requires lsp-ui ) s-l T s Toggle signature auto activate. s-l T f Toggle on type formatting. s-l T T Toggle global minor mode for synchronizing lsp-mode workspace folders and treemacs projects. (requires lsp-treemacs ) s-l g g Find definitions of the symbol under point. s-l g r Find references of the symbol under point. s-l g i Find implementations of the symbol under point. s-l g t Find type definitions of the symbol under point. s-l g d Find declarations of the symbol under point. s-l g h Show the incoming call hierarchy for the symbol at point. (requires lsp-treemacs ) s-l g a Find all meaningful symbols that match pattern. s-l h h Display the type signature and documentation of the thing at s-l h s Activate signature help. s-l h g Trigger display hover information popup and hide it on next typing. s-l r r Rename the symbol (and all references to it). s-l r o Perform the source.organizeImports code action, if available. s-l a a Execute code action. s-l a l Click lsp lens using \u2018avy\u2019 package. s-l a h Highlight symbol at point. s-l G g Peek definitions to the identifier at point. (requires lsp-ui ) s-l G r Peek references to the identifier at point. (requires lsp-ui ) s-l G i Peek implementation locations of the symbol at point. (requires lsp-ui ) s-l G s Peek symbols in the worskpace. (requires lsp-ui ) which-key integration # To enable which-key integration in the active major mode for lsp-mode-map you will need to call the lsp-enable-which-key-integration function. This could be done when lsp-mode starts with the following: ( with-eval-after-load 'lsp-mode ( add-hook 'lsp-mode-hook #' lsp-enable-which-key-integration )) You can also enable which-key integration for all major modes by passing t as a parameter. This is useful for buffers that can use multiple major modes like those using vue-mode . Modeline errors # To see all error statistics in the modeline you can enable lsp-diagnostics-modeline-mode . This is especially useful for languages that compilation might be broken due to errors in other files(e. g. Java/Haskell). ( with-eval-after-load 'lsp-mode ;; :project/:workspace/:file ( setq lsp-diagnostics-modeline-scope :project ) ( add-hook 'lsp-managed-mode-hook 'lsp-diagnostics-modeline-mode )) / To find out the global errors you might use lsp-treemacs-errors-list . Settings # lsp-log-io - If non-nil, print all messages to and from the language server to *lsp-log* . lsp-print-performance - If non-nil, print performance info. to *lsp-log* . lsp-inhibit-message - If non-nil, inhibit the message echo via inhibit-message . lsp-report-if-no-buffer - If non nil the errors will be reported even when the file is not open. lsp-keep-workspace-alive - If non nil keep workspace alive when the last workspace buffer is closed. lsp-enable-snippet - Enable/disable snippet completion support. lsp-auto-guess-root - Automatically guess the project root using projectile/project. Do not use this setting unless you are familiar with lsp-mode internals and you are sure that all of your projects are following projectile=/=project.el conventions. lsp-restart - Defines how server exited event must be handled. lsp-session-file - File where session information is stored. lsp-auto-configure - Auto configure lsp-mode . When set to t lsp-mode will auto-configure lsp-ui and company-lsp . lsp-document-sync-method - How to sync the document with the language server. lsp-auto-execute-action - Auto-execute single action. lsp-eldoc-render-all - Display all of the info returned by document/onHover . If this is nil, eldoc will show only the symbol information. lsp-enable-completion-at-point - Enable completion-at-point integration. lsp-enable-xref - Enable xref integration. lsp-diagnostic-package - Specifies which package to use for diagnostics. Choose from :auto , :flycheck , :flymake and :none . Default is :auto which means use :flycheck if present. lsp-enable-indentation - Indent regions using the file formatting functionality provided by the language server. lsp-enable-on-type-formatting - Enable textDocument/onTypeFormatting integration. lsp-before-save-edits - If non-nil, lsp-mode will apply edits suggested by the language server before saving a document. lsp-imenu-show-container-name - Display the symbol's container name in an imenu entry. lsp-imenu-container-name-separator - Separator string to use to separate the container name from the symbol while displaying imenu entries. lsp-imenu-sort-methods - How to sort the imenu items. The value is a list of kind , name or position . Priorities are determined by the index of the element. lsp-response-timeout - Number of seconds to wait for a response from the language server before timing out. lsp-enable-file-watchers - If non-nil lsp-mode will watch the files in the workspace if the server has requested that. lsp-server-trace - Request trace mode on the language server. lsp-semantic-highlighting - Enable experimental semantic highlighting support lsp-enable-imenu - If non-nil, automatically enable imenu integration when server provides textDocument/documentSymbol . lsp-signature-auto-activate - Auto activate signature when trigger char is pressed. lsp-signature-render-documentation - Include signature documentation in signature help. lsp-enable-text-document-color - Enable textDocument/documentColor when server supports it. Extensions # TRAMP # LSP mode has support for tramp buffers with the following requirements: The language server has to be present on the remote server. Having multi folder language server (like Eclipse JDT LS ) cannot have local and remote workspace folders. How does it work? lsp-mode detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as :remote? t. Then lsp-mode starts the client through tramp. Sample configuration Here it is example how you can configure python language server to work when using TRAMP . Note that if you are trying to convert existing language server configuration you should copy all of it's properties(e. g. :request-handlers , activation-fn , etc). ( lsp-register-client ( make-lsp-client :new-connection ( lsp-tramp-connection \"<insert your LS's binary name or path here>\" ) :major-modes ' ( python-mode ) :remote? t :server-id 'pyls-remote )) Dealing with stderr With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the lsp-mode parser. As a workaround, lsp-mode is redirecting stderr to /tmp/<process-name>-<id>~stderr . Limitations # File watches # When some of the workspaces that are active in the current project requests file notifications via workspace/didChangeWatchedFiles lsp-mode will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via lsp-enable-file-watchers (you may use dir-locals). Contributions # Contributions are very much welcome. Members # Here it is a list of the current lsp-mode members and what they are primary working on/responsible for. Member Responsible for: TOTBWF F# brotzeit Rust dsyzling Scala kurnevsky Scala & Rust seagle0128 Go & MS Python Language Server sebastiansturm lsp-mode core & C++ vibhavp lsp-mode core yyoncho lsp-mode core & Java ericdallo Dart & Flutter Troubleshooting # check *lsp-log* buffer and verify that lsp-mode is able to find the server. If lsp-mode is unable to find the binary but it is on the path it is probably caused by the fact that emacs is running with different path. You may check the current path by executing M-: (getenv \"PATH\") . If this is the case, you have several options to fix the issue. make sure that emacs is using the proper path by running emacs from terminal Modify the path using setpath Look for lsp-mode variable to customize server path. Usually, you may find the variable by doing M-x customize-group RET lsp-LANGUAGE-SERVER-ID . set lsp-log-io to t to inspect communication between client and the server. Use lsp-workspace-show-log to switch to the corresponding log buffer. lsp-describe-session will show the current projects roots + the started severs and allows inspecting the server capabilities. Adding support for languages # Registering server # Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of lsp-client.el for the additional settings supported on registration time. lsp-language-id-configuration must be updated to contain the corresponding mode -> language id - in this case (python-mode . \"python\") ( defvar lsp-language-id-configuration ' ( ... ( python-mode . \"python\" ) ... )) ;; if you are adding the support for your language server in separate repo use ;; (add-to-list 'lsp-language-id-configuration '(python-mode . \"python\")) ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection \"pyls\" ) :major-modes ' ( python-mode ) :server-id 'pyls )) If the language server supports environment variables to control additional behavior, you can register that by using the :environment-fn function, like the Bash language client does: ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection ' ( \"bash-language-server\" \"start\" )) :major-modes ' ( sh-mode ) :priority -1 :environment-fn ( lambda () (( \"EXPLAINSHELL_ENDPOINT\" . lsp-bash-explainshell-endpoint ) ( \"HIGHLIGHT_PARSING_ERRORS\" . lsp-bash-highlight-parsing-errors ))) :server-id 'bash-ls )) lsp-bash-explainshell-endpoint and lsp-bash-highlight-parsing-errors are language client defcustom that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with lsp-restart-workspace for the changes to be applied. Sections # lsp-mode provides tools to bridge emacs defcustom as a language configuration sections properties(see specification workspace/configuration ). In addition you may use lsp-generate-settings from Generate Settings script to generate defcustom from package.json VScode plugin manifest. Example: ( defcustom lsp-foo-language-server-property \"bar\" \"Demo property.\" :group 'foo-ls :risky t ) ( lsp-register-custom-settings ' (( \"foo.section.property\" lsp-foo-language-server-property ))) ( lsp-configuration-section \"foo\" ) ;; => ((\"foo\" (\"settings\" (\"property\" . \"bar\")))) FAQ # How do I troubleshoot \"Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)\"? This message indicates that the language server has crashed for some reason. You may check the server stderr which is *FOO-LS::stderr* . If you get this message on startup you may try to run the exact command that lsp-mode is running in the terminal. You may find it in *lsp-log* buffer. How to configure a server with local variables? Add lsp server call to hack-local-variables-hook which runs right after the local variables are loaded. ( add-hook 'hack-local-variables-hook ( lambda () ( when ( derived-mode-p 'XXX-mode ) ( lsp )))) - I have multiple language servers registered for language FOO. Which one will be used when opening a project? - The one with highest priority wins. lsp-clients.el predefined servers have priority -1, lower than external packages (priority 0 if unspecified). If a server is registered with :add-on? flag set to t it will be started in parallel to the other servers that are registered for the current mode. - I have multiple language servers for language FOO and I want to select the server per project, what can I do? - You may create dir-local for each of the projects and specify list of lsp-enabled-clients . This will narrow the list of the clients that are going to be tested for the project. - The completion does not work fine and inserts arguments and placeholders, what I am doing wrong? - make sure you have installed yasnippet and you have yasnippet minor mode enabled. - I am getting \"Package \u2018spinner-1.7.3\u2019 is unavailable\" when trying to install lsp-mode . - This is caused by GPG keys used by the ELPA package manager not being up to date. You may fix by installing: gnu-elpa-keyring-update - The flycheck does not work in typescript , html and javascript blocks in vue-mode . How to fix that? - This is caused by the fact that vue-mode uses multiple major modes in single file and the lsp-ui checker may not associated with the major mode at point. You could fix that by adding the following lines to your config. ( with-eval-after-load 'lsp-mode ( mapc #' lsp-flycheck-add-mode ' ( typescript-mode js-mode css-mode vue-html-mode ))) - I have disabled snippets and Rust Analyzer server inserts redundant $0 when performing completion? - Rust Analyzer does not support disabling snippets - see https://github.com/rust-analyzer/rust-analyzer/issues/2518 Changelog # The changelog can be found here . See also # lsp-docker - provide docker image with preconfigured language servers with corresponding emacs configuration. company-box - company frontend with icons. dap-mode - Debugger integration for lsp-mode . eglot - An alternative minimal LSP implementation. which-key - Emacs package that displays available keybindings in popup projectile - Project Interaction Library for Emacs","title":"Home"},{"location":"#language-server-protocol-support-for-emacs","text":"","title":"Language Server Protocol Support for Emacs"},{"location":"#why","text":"\u2764\ufe0f Community Driven \ud83d\udc8e Fully featured - supports all features in Language Server Protocol v3.14. \ud83d\ude80 Fast - see performance section \ud83c\udf1f Flexible - choose between full-blown IDE with flashy UI or minimal distraction free \u2699 Easy to configure - works out of the box and automatically upgrades if additional packages are present","title":"Why?"},{"location":"#overview","text":"Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company , flycheck and projectile . Non-blocking asynchronous calls Real-time Diagnostics/linting via flycheck (recommended) or flymake when Emacs > 26 (requires flymake>=1.0.5) Code completion - company-capf / completion-at-point (note that company-lsp is no longer supported). Hovers - using lsp-ui Code actions - using lsp-execute-code-action or lsp-ui sideline. Code outline - using builtin imenu or helm-imenu Code navigation - using builtin xref , lsp-treemacs tree views or lsp-ui peek functions. Code lens Symbol highlights Formatting Debugger - dap-mode Helm integration - helm-lsp Ivy integration - lsp-ivy Treemacs integration - lsp-treemacs Semantic highlighting (as currently implemented by JDT LS and unreleased builds of clangd, cf. Semantic highlighting spec ) which-key integration for better discovery","title":"Overview"},{"location":"#presentationsdemos","text":"skybert 's emacsconf presentation (Java) thatwist 's ScalaUA Conference presentation (Scala)","title":"Presentations/demos"},{"location":"#installation","text":"","title":"Installation"},{"location":"#install-via-melpa","text":"The recommended way to install lsp-mode is via package.el - the built-in package manager in Emacs. lsp-mode is available on the two major package.el community maintained repos - MELPA Stable and MELPA . M-x package-install [RET] lsp-mode [RET]","title":"Install via melpa"},{"location":"#configuration","text":"","title":"Configuration"},{"location":"#install-language-server","text":"Check the table below with the list of supported servers and the corresponding instructions on how to install the server.","title":"Install language server"},{"location":"#configure-lsp-mode","text":"Vanilla Emacs You could go minimal and use lsp-mode as it is without external packages with the built-in flymake and completion-at-point or you could install the following extensions for better experience: install lsp-ui for fancy sideline, popup documentation, VScode-like peek UI, etc. install flycheck if you prefer the more popular flycheck over renewed flymake . lsp-mode will automatically pick it up. install company-mode for completion popups. install lsp-treemacs for various tree based UI controls (symbols, errors overview, call hierarchy, etc.) install helm-lsp provides on type completion alternative of xref-apropos using helm . install lsp-ivy provides on type completion alternative of xref-apropos using ivy . install dap-mode if your language is supported by the debugger. ;; if you want to change prefix for lsp-mode keybindings. ( setq lsp-keymap-prefix \"s-l\" ) ( require 'lsp-mode ) ( add-hook 'XXX-mode-hook #' lsp ) where XXX could be major mode like python , java , c++ . Alternatively, if you want to minimize you configuration you may use prog-mode-hook . In case you do that, lsp will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, lsp-mode will automatically detect and configure lsp-ui and company-lsp . To turn off that behavior you could set lsp-auto-configure to nil . To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( add-hook 'XXX-mode-hook #' lsp-deferred ) Spacemacs lsp-mode is included in spacemacs develop branch. Add lsp to dotspacemacs-configuration-layers and configure the language that you want to use to be backed by lsp backend. use-package Replace (require 'lsp-mode) with the following if you use use-package. ;; set prefix for lsp-command-keymap (few alternatives - \"C-l\", \"C-c l\") ( setq lsp-keymap-prefix \"s-l\" ) ( use-package lsp-mode :hook ( ;; replace XXX-mode with concrete major-mode(e. g. python-mode) ( XXX-mode . lsp ) ;; if you want which-key integration ( lsp-mode . lsp-enable-which-key-integration )) :commands lsp ) ;; optionally ( use-package lsp-ui :commands lsp-ui-mode ) ;; if you are helm user ( use-package helm-lsp :commands helm-lsp-workspace-symbol ) ;; if you are ivy user ( use-package lsp-ivy :commands lsp-ivy-workspace-symbol ) ( use-package lsp-treemacs :commands lsp-treemacs-errors-list ) ;; optionally if you want to use debugger ( use-package dap-mode ) ;; (use-package dap-LANGUAGE) to load the dap adapter for your language ;; optional if you want which-key integration ( use-package which-key :config ( which-key-mode )) To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( use-package lsp-mode :hook ( XXX-mode . lsp-deferred ) :commands ( lsp lsp-deferred )) Recommended settings for lsp-mode related packages company ( setq company-minimum-prefix-length 1 company-idle-delay 0.0 ) ;; default is 0.2 Formatting In general the formatter settings are language server specific(e. g. JDT LS uses eclipse formatter file and lsp-java-format-settings-url to configure it while clangd uses clangd-format ). The only settings that are controlled on lsp-mode level are indent size and whether the server should use tabs or spaces. Use c-basic-offset for cc-mode derived moves(e. g. java, C++) to control the tab size. Use tab-width for any other mode to do the same. Use indent-tabs-mode for selecting tab/spaces. Docker Refer to lsp-docker README which provides a guide on how you can run lsp-mode in docker container.","title":"Configure lsp-mode"},{"location":"#performance","text":"Use M-x lsp-diagnose to validate if your lsp-mode is properly configured. In the section below, you could find description for each of the checks: When configured properly lsp-mode 's performance is on par with mainstream LSP clients (e. g. VScode , Theia , etc). Here are steps to achieve optimal results. Use Emacs 27+ with native json support. In order to validate that you match this criteria do M-: (functionp 'json-serialize) RET . Benchmarks show that Emacs 27 is ~15 times faster than Emacs when using Elisp json parser implementation. Adjust gc-cons-threshold . The default setting is too low for lsp-mode 's needs due to the fact that client/server communication generates a lot of memory/garbage. You have two options: Set it to big number(100mb) like most of the popular starter kits like Spacemacs/Doom/Prelude, etc do: ( setq gc-cons-threshold 100000000 ) Follow the method recommended by Gnu Emacs Maintainer Eli Zaretskii: \"My suggestion is to repeatedly multiply gc-cons-threshold by 2 until you stop seeing significant improvements in responsiveness, and in any case not to increase by a factor larger than 100 or somesuch. If even a 100-fold increase doesn't help, there's some deeper problem with the Lisp code which produces so much garbage, or maybe GC is not the reason for slowdown.\" Source: https://www.reddit.com/r/emacs/comments/brc05y/is_lspmode_too_slow_to_use_for_anyone_else/eofulix/ Increase the amount of data which Emacs reads from the process. Again the emacs default is too low 4k considering that the some of the language server responses are in 800k - 3M range. ( setq read-process-output-max ( * 1024 1024 )) ;; 1mb Optional: use company-capf . Although company-lsp also supports caching lsp-mode 's company-capf does that by default. To achieve that uninstall company-lsp or put these lines in your config: ( setq lsp-prefer-capf t ) Note: - to verify which company backend implementation you are using do M-x company-diag when performing auto-completion. Optional: Disable lsp-ui . Normally, lsp-ui is very fast but in some systems (especially when using Windows ) lsp-ui overlays and popups might slow down emacs. Optional: fine-tune lsp-idle-delay . This variable determines how often lsp-mode will refresh the highlights, lenses, links, etc while you type. ( setq lsp-idle-delay 0.500 ) Reporting performance problems If you have tried all of the non-optional steps from the list and emacs is still not very responsive please open a PR with the following information: Collect lsp-log data after setting lsp-print-performance to t . ( setq lsp-print-performance t ) Include emacs performance report. Use the following step to collect it: M-x profiler-start and select CPU Reproduce the slow behavior. M-x profiler-stop In the profiler report expand all nodes by doing C-u TAB . Note: - lsp-mode is just a frontend and the performance depends on server as well. Some servers (e. g. Palantir's Python Language Server) might be slow when performing auto-completion.","title":"Performance"},{"location":"#how-does-it-work","text":"lsp-mode has predefined list of server configurations (loaded in lsp-clients.el ) containing a mapping from major-mode to the server configuration or by using activation function. In addition to the default server configuration located in lsp-clients.el there are few languages servers which require separate package(check Supported languages ). When you open a file from a particular project lsp-mode and call lsp command lsp-mode will look for server registrations able to handle current file. If there is such client lsp-mode will look for the project root. If you open a file from the project for the first time you will be prompted to define the current project root. Once the project root is selected it is saved in lsp-session file and it will be loaded the next time you start Emacs so you no longer will be asked for a project root when you open a file from that project. Later if you want to change the project root you may use lsp-workspace-folder-remove to remove the project and call lsp-workspace-folder-add to add the root. If you want to force starting a particular language server in a file you may use C-u M-x lsp which will prompt you to select language server to start.","title":"How does it work?"},{"location":"#supported-languages","text":"Some of the servers are directly supported by lsp-mode by requiring lsp-clients.el while others require installing additional packages which provide server specific functionality. Language Language Server Built-in Installation command Debugger Ada ada languageserver Yes Installation instructions Yes (gdb) Angular vscode-ng-language-service Yes Installation instructions Not relevant Bash bash-language-server Yes npm i -g bash-language-server C++ ccls emacs-ccls ccls Yes (gdb or lldb) C++ clangd Yes clangd Yes (gdb or lldb) C++ cquery emacs-cquery cquery Yes (gdb or lldb) C# OmniSharp-Roslyn Yes OmniSharp-Roslyn No Clojure clojure-lsp Yes clojure-lsp CMake cmake-language-server Yes pip install cmake-language-server Not relevant Crystal scry Yes scry CSS/LessCSS/SASS/SCSS css Yes npm install -g vscode-css-languageserver-bin Dart dart analysisserver lsp-dart built into dart-sdk Yes Dhall dhall-lsp-server Yes Installation instructions No Dockerfile dockerfile-language-server-nodejs Yes npm install -g dockerfile-language-server-nodejs Elixir elixir-lsp/elixir-ls Yes elixir-lsp/elixir-ls Yes Elixir elixir-ls Yes elixir-ls Yes Elm elmLS Yes npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions No Erlang erlang ls Yes erlang ls Eslint eslint Yes LSP ESLint Guide N/A F# fsautocomplete Yes Automatic by lsp-fsharp No Fortran fortran-language-server Yes pip install fortran-language-server Yes Go gopls Yes go get golang.org/x/tools/gopls@latest docs Yes Go bingo Yes bingo Yes Groovy groovy-language-server Yes groovy-language-server Hack hhvm Yes hhvm HTML html Yes npm install -g vscode-html-languageserver-bin Haskell IDE engine lsp-haskell IDE engine Lua EmmyLua Yes Installation Java Eclipse JDT LS lsp-java Automatic by lsp-java Yes JavaScript/TypeScript typescript-language-server (recommended) Yes npm i -g typescript-language-server; npm i -g typescript Yes (Firefox/Chrome) JavaScript/TypeScript javascript-typescript-stdio Yes npm i -g javascript-typescript-langserver Yes (Firefox/Chrome) JavaScript Flow flow (add-on if working on a Flow file) Yes flow Yes (Firefox/Chrome) Json vscode-json-languageserver Yes Automatic or manual by npm i -g vscode-json-languageserver Julia lsp-julia lsp-julia LanguageServer.jl Kotlin kotlin-language-server Yes kotlin-language-server Nim nimlsp Yes nimble install nimlsp No OCaml ocaml-language-server Yes ocaml-language-server OCaml ocaml-lsp-server Yes ocaml-lsp-server Pascal/Object Pascal pascal-language-server lsp-pascal pascal-language-server No Perl Perl::LanguageServer Yes cpanm Perl::LanguageServer PHP(recommended) intelephense Yes npm i intelephense -g Yes PHP php-language-server Yes php-language-server Yes Powershell PowerShellEditorServices Yes Automatic Yes PureScript purescript-language-server Yes npm i purescript-language-server No Python pyls Yes pip install 'python-language-server[all]' Yes Python(Microsoft) Microsoft Python Language Server lsp-python-ms lsp-python-ms Yes R languageserver Yes install.packages(\"languageserver\") No Ruby solargraph Yes gem install solargraph Yes Rust rls Yes rls Yes Rust rust-analyzer Yes rust-analyzer Scala Metals Yes Metals Swift sourcekit-LSP lsp-sourcekit sourcekit-LSP Yes (via llvm debug adapter) Terraform terraform-lsp No Git clone outside of $GOPATH ; go install. (Requires go > 1.11) No TeX, LaTeX, etc. Digestif Yes luarocks \\-\\-server http://luarocks.org/dev install digestif TeX, LaTeX, etc. texlab Yes cargo install \u2013git https://github.com/latex-lsp/texlab.git TeX, LaTeX, etc. texlab lsp-latex cargo install \u2013git https://github.com/latex-lsp/texlab.git Verilog/SystemVerilog hdl checker Yes pip install hdl-checker \u2013upgrade No VHDL VHDL Tool Yes Download from http://www.vhdltool.com/download No Vimscript vim-language-server Yes npm install -g vim-language-server n/a Vue vue-language-server Yes npm install -g vls Yes (Firefox/Chrome) XML lsp4xml Yes Download from lsp4xml releases YAML yaml Yes npm install -g yaml-language-server","title":"Supported languages"},{"location":"#commands","text":"When using lsp-mode most of the features depend on server capabilities. lsp-mode provides default bindings which are dynamically enabled/disabled based on the server functionality. All the commands are configured lsp-command-map which is bound to lsp-keymap-prefix (default s-l ). Keybinding Description s-l s s Entry point for the server startup. s-l s r Restart language server s-l s q Shutdown language server s-l s d Describes current session s-l s D Disconnect the buffer from the language server keeping the server running. s-l = = Ask the server to format this document. s-l = r Ask the server to format the region, or if none is selected, the current line. s-l F a Add new project root to the list of workspace folders. s-l F r Remove project root from the list of workspace folders. s-l F b Remove project root from the workspace blacklist. s-l T l Toggle code-lens overlays. s-l T L Toggle client-server protocol logging. s-l T h Toggle symbol highlighting. s-l T S Toggle minor mode for showing information for current line in sideline. (requires lsp-ui ) s-l T d Toggle minor mode for showing hover information in child frame. (requires lsp-ui ) s-l T s Toggle signature auto activate. s-l T f Toggle on type formatting. s-l T T Toggle global minor mode for synchronizing lsp-mode workspace folders and treemacs projects. (requires lsp-treemacs ) s-l g g Find definitions of the symbol under point. s-l g r Find references of the symbol under point. s-l g i Find implementations of the symbol under point. s-l g t Find type definitions of the symbol under point. s-l g d Find declarations of the symbol under point. s-l g h Show the incoming call hierarchy for the symbol at point. (requires lsp-treemacs ) s-l g a Find all meaningful symbols that match pattern. s-l h h Display the type signature and documentation of the thing at s-l h s Activate signature help. s-l h g Trigger display hover information popup and hide it on next typing. s-l r r Rename the symbol (and all references to it). s-l r o Perform the source.organizeImports code action, if available. s-l a a Execute code action. s-l a l Click lsp lens using \u2018avy\u2019 package. s-l a h Highlight symbol at point. s-l G g Peek definitions to the identifier at point. (requires lsp-ui ) s-l G r Peek references to the identifier at point. (requires lsp-ui ) s-l G i Peek implementation locations of the symbol at point. (requires lsp-ui ) s-l G s Peek symbols in the worskpace. (requires lsp-ui )","title":"Commands"},{"location":"#which-key-integration","text":"To enable which-key integration in the active major mode for lsp-mode-map you will need to call the lsp-enable-which-key-integration function. This could be done when lsp-mode starts with the following: ( with-eval-after-load 'lsp-mode ( add-hook 'lsp-mode-hook #' lsp-enable-which-key-integration )) You can also enable which-key integration for all major modes by passing t as a parameter. This is useful for buffers that can use multiple major modes like those using vue-mode .","title":"which-key integration"},{"location":"#modeline-errors","text":"To see all error statistics in the modeline you can enable lsp-diagnostics-modeline-mode . This is especially useful for languages that compilation might be broken due to errors in other files(e. g. Java/Haskell). ( with-eval-after-load 'lsp-mode ;; :project/:workspace/:file ( setq lsp-diagnostics-modeline-scope :project ) ( add-hook 'lsp-managed-mode-hook 'lsp-diagnostics-modeline-mode )) / To find out the global errors you might use lsp-treemacs-errors-list .","title":"Modeline errors"},{"location":"#settings","text":"lsp-log-io - If non-nil, print all messages to and from the language server to *lsp-log* . lsp-print-performance - If non-nil, print performance info. to *lsp-log* . lsp-inhibit-message - If non-nil, inhibit the message echo via inhibit-message . lsp-report-if-no-buffer - If non nil the errors will be reported even when the file is not open. lsp-keep-workspace-alive - If non nil keep workspace alive when the last workspace buffer is closed. lsp-enable-snippet - Enable/disable snippet completion support. lsp-auto-guess-root - Automatically guess the project root using projectile/project. Do not use this setting unless you are familiar with lsp-mode internals and you are sure that all of your projects are following projectile=/=project.el conventions. lsp-restart - Defines how server exited event must be handled. lsp-session-file - File where session information is stored. lsp-auto-configure - Auto configure lsp-mode . When set to t lsp-mode will auto-configure lsp-ui and company-lsp . lsp-document-sync-method - How to sync the document with the language server. lsp-auto-execute-action - Auto-execute single action. lsp-eldoc-render-all - Display all of the info returned by document/onHover . If this is nil, eldoc will show only the symbol information. lsp-enable-completion-at-point - Enable completion-at-point integration. lsp-enable-xref - Enable xref integration. lsp-diagnostic-package - Specifies which package to use for diagnostics. Choose from :auto , :flycheck , :flymake and :none . Default is :auto which means use :flycheck if present. lsp-enable-indentation - Indent regions using the file formatting functionality provided by the language server. lsp-enable-on-type-formatting - Enable textDocument/onTypeFormatting integration. lsp-before-save-edits - If non-nil, lsp-mode will apply edits suggested by the language server before saving a document. lsp-imenu-show-container-name - Display the symbol's container name in an imenu entry. lsp-imenu-container-name-separator - Separator string to use to separate the container name from the symbol while displaying imenu entries. lsp-imenu-sort-methods - How to sort the imenu items. The value is a list of kind , name or position . Priorities are determined by the index of the element. lsp-response-timeout - Number of seconds to wait for a response from the language server before timing out. lsp-enable-file-watchers - If non-nil lsp-mode will watch the files in the workspace if the server has requested that. lsp-server-trace - Request trace mode on the language server. lsp-semantic-highlighting - Enable experimental semantic highlighting support lsp-enable-imenu - If non-nil, automatically enable imenu integration when server provides textDocument/documentSymbol . lsp-signature-auto-activate - Auto activate signature when trigger char is pressed. lsp-signature-render-documentation - Include signature documentation in signature help. lsp-enable-text-document-color - Enable textDocument/documentColor when server supports it.","title":"Settings"},{"location":"#extensions","text":"","title":"Extensions"},{"location":"#tramp","text":"LSP mode has support for tramp buffers with the following requirements: The language server has to be present on the remote server. Having multi folder language server (like Eclipse JDT LS ) cannot have local and remote workspace folders. How does it work? lsp-mode detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as :remote? t. Then lsp-mode starts the client through tramp. Sample configuration Here it is example how you can configure python language server to work when using TRAMP . Note that if you are trying to convert existing language server configuration you should copy all of it's properties(e. g. :request-handlers , activation-fn , etc). ( lsp-register-client ( make-lsp-client :new-connection ( lsp-tramp-connection \"<insert your LS's binary name or path here>\" ) :major-modes ' ( python-mode ) :remote? t :server-id 'pyls-remote )) Dealing with stderr With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the lsp-mode parser. As a workaround, lsp-mode is redirecting stderr to /tmp/<process-name>-<id>~stderr .","title":"TRAMP"},{"location":"#limitations","text":"","title":"Limitations"},{"location":"#file-watches","text":"When some of the workspaces that are active in the current project requests file notifications via workspace/didChangeWatchedFiles lsp-mode will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via lsp-enable-file-watchers (you may use dir-locals).","title":"File watches"},{"location":"#contributions","text":"Contributions are very much welcome.","title":"Contributions"},{"location":"#members","text":"Here it is a list of the current lsp-mode members and what they are primary working on/responsible for. Member Responsible for: TOTBWF F# brotzeit Rust dsyzling Scala kurnevsky Scala & Rust seagle0128 Go & MS Python Language Server sebastiansturm lsp-mode core & C++ vibhavp lsp-mode core yyoncho lsp-mode core & Java ericdallo Dart & Flutter","title":"Members"},{"location":"#troubleshooting","text":"check *lsp-log* buffer and verify that lsp-mode is able to find the server. If lsp-mode is unable to find the binary but it is on the path it is probably caused by the fact that emacs is running with different path. You may check the current path by executing M-: (getenv \"PATH\") . If this is the case, you have several options to fix the issue. make sure that emacs is using the proper path by running emacs from terminal Modify the path using setpath Look for lsp-mode variable to customize server path. Usually, you may find the variable by doing M-x customize-group RET lsp-LANGUAGE-SERVER-ID . set lsp-log-io to t to inspect communication between client and the server. Use lsp-workspace-show-log to switch to the corresponding log buffer. lsp-describe-session will show the current projects roots + the started severs and allows inspecting the server capabilities.","title":"Troubleshooting"},{"location":"#adding-support-for-languages","text":"","title":"Adding support for languages"},{"location":"#registering-server","text":"Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of lsp-client.el for the additional settings supported on registration time. lsp-language-id-configuration must be updated to contain the corresponding mode -> language id - in this case (python-mode . \"python\") ( defvar lsp-language-id-configuration ' ( ... ( python-mode . \"python\" ) ... )) ;; if you are adding the support for your language server in separate repo use ;; (add-to-list 'lsp-language-id-configuration '(python-mode . \"python\")) ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection \"pyls\" ) :major-modes ' ( python-mode ) :server-id 'pyls )) If the language server supports environment variables to control additional behavior, you can register that by using the :environment-fn function, like the Bash language client does: ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection ' ( \"bash-language-server\" \"start\" )) :major-modes ' ( sh-mode ) :priority -1 :environment-fn ( lambda () (( \"EXPLAINSHELL_ENDPOINT\" . lsp-bash-explainshell-endpoint ) ( \"HIGHLIGHT_PARSING_ERRORS\" . lsp-bash-highlight-parsing-errors ))) :server-id 'bash-ls )) lsp-bash-explainshell-endpoint and lsp-bash-highlight-parsing-errors are language client defcustom that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with lsp-restart-workspace for the changes to be applied.","title":"Registering server"},{"location":"#sections","text":"lsp-mode provides tools to bridge emacs defcustom as a language configuration sections properties(see specification workspace/configuration ). In addition you may use lsp-generate-settings from Generate Settings script to generate defcustom from package.json VScode plugin manifest. Example: ( defcustom lsp-foo-language-server-property \"bar\" \"Demo property.\" :group 'foo-ls :risky t ) ( lsp-register-custom-settings ' (( \"foo.section.property\" lsp-foo-language-server-property ))) ( lsp-configuration-section \"foo\" ) ;; => ((\"foo\" (\"settings\" (\"property\" . \"bar\"))))","title":"Sections"},{"location":"#faq","text":"How do I troubleshoot \"Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)\"? This message indicates that the language server has crashed for some reason. You may check the server stderr which is *FOO-LS::stderr* . If you get this message on startup you may try to run the exact command that lsp-mode is running in the terminal. You may find it in *lsp-log* buffer. How to configure a server with local variables? Add lsp server call to hack-local-variables-hook which runs right after the local variables are loaded. ( add-hook 'hack-local-variables-hook ( lambda () ( when ( derived-mode-p 'XXX-mode ) ( lsp )))) - I have multiple language servers registered for language FOO. Which one will be used when opening a project? - The one with highest priority wins. lsp-clients.el predefined servers have priority -1, lower than external packages (priority 0 if unspecified). If a server is registered with :add-on? flag set to t it will be started in parallel to the other servers that are registered for the current mode. - I have multiple language servers for language FOO and I want to select the server per project, what can I do? - You may create dir-local for each of the projects and specify list of lsp-enabled-clients . This will narrow the list of the clients that are going to be tested for the project. - The completion does not work fine and inserts arguments and placeholders, what I am doing wrong? - make sure you have installed yasnippet and you have yasnippet minor mode enabled. - I am getting \"Package \u2018spinner-1.7.3\u2019 is unavailable\" when trying to install lsp-mode . - This is caused by GPG keys used by the ELPA package manager not being up to date. You may fix by installing: gnu-elpa-keyring-update - The flycheck does not work in typescript , html and javascript blocks in vue-mode . How to fix that? - This is caused by the fact that vue-mode uses multiple major modes in single file and the lsp-ui checker may not associated with the major mode at point. You could fix that by adding the following lines to your config. ( with-eval-after-load 'lsp-mode ( mapc #' lsp-flycheck-add-mode ' ( typescript-mode js-mode css-mode vue-html-mode ))) - I have disabled snippets and Rust Analyzer server inserts redundant $0 when performing completion? - Rust Analyzer does not support disabling snippets - see https://github.com/rust-analyzer/rust-analyzer/issues/2518","title":"FAQ"},{"location":"#changelog","text":"The changelog can be found here .","title":"Changelog"},{"location":"#see-also","text":"lsp-docker - provide docker image with preconfigured language servers with corresponding emacs configuration. company-box - company frontend with icons. dap-mode - Debugger integration for lsp-mode . eglot - An alternative minimal LSP implementation. which-key - Emacs package that displays available keybindings in popup projectile - Project Interaction Library for Emacs","title":"See also"},{"location":"CHANGELOG/","text":"Release 6.3 # Implemented company-capf integration. company-lsp is no longer supported. Dropped support for dart language server in favour of dart SDK(breaking) Added verilog support for LSP using hdl-checker Implemented call hierarchy support (available in lsp-treemacs ) Implemented support for ESLint language server. ocmalmerlin-lsp moved to ocaml-lsp-server(breaking) Added New VHDL language server https://github.com/kraigher/rust_hdl#configuration Add Nim language server integration Implement automatic downloading facilities and implemented auto-download for typescript-language-server , javascript-typescript-stdio and json-language-server . Implement metals decoration protocol Send metals/didFocusTextDocument notification on buffer change Add default keybindings and which-key integration Add support for Dhall langauge server Implemented debug adapter protocol support for metals Add CMake language server integration Add rust-analyzer runnables support Implemented rust-analyzer inlay hints Support pyenv for pyls Add clang-tidy specific Flycheck error explainer for the lsp checker Improve lsp-mode completion performance by supressing non completion related features when completion is active. lsp-json: Enable formatter provider Accomodate the new :end-column and :end-column from flycheck Implement status bar for diagnostics lsp-diagnostics-modeline-mode Auto install of the html-language-server Flycheck support for diagnostic tags (3.15 spec). Adding support for GDScript langauge server used view mode for metals doctor buffer add texlab as tex LSP server Started new set of integration tests without using ecukes Support \"only\" param when requesting code actions Add Perl-LanguageServer support add support robot-framework language server. Implement deferred semantic highlighting Change default transport for erlang ls to stdio dart language server moved into separate repo https://github.com/emacs-lsp/lsp-dart Activate flow language server if there is flow tag in file or .flowconfig in project Add purescript-language-server (#1596) Process the $/progress messages from LSP 3.15 Display the first line of MarkupContent in eldoc (#1607) Perform willSaveWaitUntil synchronously and with shorter timeout Display images when rendering markdown(usefull for latex language servers). Increase lsp-idle-delay to 0.5 Support bash language server glob pattern option (#1594) Use pagebreaks for lsp-describe-thing-at-point lsp-mode: Eliminate quadratic-time index-building for imenu. (#1616) Release 6.2 # Support dynamic rename registration Add basic support for style semantic highlighting Added Haxe language server integration Add C#-support via Roslyn. Add emmy lua support Enable plugins in typescript language server. 1079 Provide support for Ada Language server Implement right click support in lsp-mode buffers. Added built-in support for Rust Analyzer . Added support for HDL Checker server to lsp-vhdl Added support for Terraform language server. Added support for R language server (#1182) Added support for passing environment variables to language servers (#1184) Speedup lsp-mode's JSONRPC processing (\\~2 times) Add cancel-token to lsp-request-async Implement unified way to handle recurring lsp features Added support for powershell language server. Implemented inlay hints for Rust Analyzer (thanks to brotzeit ). Implemented automatic installation for C# language server. Reimplemented textDocument/signatureHelp - now the signature is displayed in lv buffer. Cancel sync requests when presssing C-g during the request. Use c-basic-offset when in cc-mode . Add support for Crystal via scry (#1218). Implement textDocument/documentColor support. Release 6.1 # Support for new languages/language servers: # Kotlin Language Server (Thanks to Jon Carr) gopls Language Server for Go XML Language Server (lsp4xml) Hack (using HHVM ) Intelephense for PHP clojure-lsp for Clojure/ClojureScipt (Thanks to Dario Benedek Fazekas) elmLS for Elm (Thanks to Daniel-V) FsAutoComplete for F# (Thanks to Reed Mullanix) Added Erlang support via erlang ls Added Dockerfile support via dockerfile-language-server-nodejs New logging options # lsp-mode now logs to buffer *lsp-log* , instead of *Messages* . This can be controlled with the variable lsp-log-max (Thanks to Thomas Fini Hansen). If lsp-print-performance is non-nil, lsp-mode will log a corresponding performance trace to *lsp-log* for every message to and from the server. The variable lsp-print-io , when non-nil will cause lsp-mode to log all messages to and from the server to a unique *lsp-io* buffer for every project root. These logs can be saved to a file and viewed using the LSP Inspector . LSP Methods # Add support for textDocument/prepareRename . If supported by the language server, all renaming operations will be tested for validity. Add support for file watches . Add support for CodeAction literals . Add API level support for folding ranges . Folding support for origami.el support is implemented by package lsp-origami . Support document links . This can be controlled using the variable lsp-enable-links . Support resource operations (edits sent from the language server can now create/modify/remove files and directories). Add support for workspace/configuration . Add new function lsp-disconnect . Added lsp-find-definition-mouse and bound to C-<down-mouse-1> Added lsp-extend-selection as a frontend of new LSP method textDocument/extendSelection Other changes # Add project logo (thanks to Jon Carr). Created an integration test suite for lsp-mode (See directory features ). If available, using the native JSON API introduced in Emacs 27.1. Tramp implementation now uses TRAMP process instead of TCP sockets (Thanks to Karsten Patzwaldt). LSP autoconfiguration adds company-lsp to the list of comapny backends instead of overriding it. Add lsp-mode-map . Add menu bar entries for lsp-mode . Perform before save operations ( textDocument/willSaveWaitUntil ) asynchronously. imenu support is now handled asynchronously (Thanks to Dario Gjorgjevski). Added option :none for lsp-prefer-flymake , which disabled both Flymake and Flycheck support. Changed flymake to report the errors immediately after they arrive instead of waiting flymake to call lsp-mode . Add debounce when server does not support incremental updates. Add hook lsp-after-uninitialized-hook , which stores the list of functions called after a language server has been uninitialized. Add variable lsp-symbol-highlighting-skip-current , which lets the user skip the current symbol when a given symbol is being highlighted. Add variable lsp-enabled-clients , which lets users set which defined clients are allowed to be used. Support multiple signatures while displaying eldoc text. Add variable lsp-signature-render-all , which when non-nil forces lsp-mode to only show the current active signature. Expose configuration settings for various language servers. Language servers can now be disabled with the variable lsp-disabled-clients . Improved applying changes speed. Fixed xref support for emacs 27+ Implemented automatic installation for F# language server. Added Emacs 26.x to CI Fixed handling of stderr when running over TRAMP . Implemented support for running the language server in Docker container over local files. Release 6.0 # lsp-mode now have single entry point lsp for all language and based on the major mode starts the corresponding language servers. Added flymake integration. lsp automatically enables and configures company-lsp , lsp-ui , yasnippet , or flymake if they are present so no additional configuration is needed except installing the packages. That behavior could be disabled by setting lsp-auto-configure to nil . lsp-mode ships with several predefined servers located in lsp-clients.el which does not require additional package. For the more complex Language Servers like Eclipse JDT , ccls , cquery and haskell we still require separate package due to relatively high code base. lsp-mode handles automatically server failures by asking the user whether he/she wants to restart the server. introduced new command lsp-describe-session which replaces the existing one lsp-capabilities . The command lists the folders that are part of the workspace and the servers that are associated with the corresponding folder. lsp-mode displays information about the running server and it's status in the modeline. lsp-define-stdio-client and lsp-define-tcp-client are replaced with lsp-register-client lsp rely on projectile or project.el now only for suggesting project root. Once you open new file in a project and start lsp it will provide several options(import project, blacklist project, select other directory root). Once you select a root it will be persisted and used for the next sessions. support for multiple language servers per single file and workspace. changed lsp-mode settings to more sensible defaults. Removed all synchronous calls from the server startup. Improved multi-folder support. added backends for: Bash, C++, CSS, Dart, Elixir, Fortran, Go, Groovy, HTML, Javascript/Typescript, Javascript/Typescript, Ocaml, PHP, Python, Ruby, Rust, Vue, Flow","title":"Changelog"},{"location":"CHANGELOG/#release-63","text":"Implemented company-capf integration. company-lsp is no longer supported. Dropped support for dart language server in favour of dart SDK(breaking) Added verilog support for LSP using hdl-checker Implemented call hierarchy support (available in lsp-treemacs ) Implemented support for ESLint language server. ocmalmerlin-lsp moved to ocaml-lsp-server(breaking) Added New VHDL language server https://github.com/kraigher/rust_hdl#configuration Add Nim language server integration Implement automatic downloading facilities and implemented auto-download for typescript-language-server , javascript-typescript-stdio and json-language-server . Implement metals decoration protocol Send metals/didFocusTextDocument notification on buffer change Add default keybindings and which-key integration Add support for Dhall langauge server Implemented debug adapter protocol support for metals Add CMake language server integration Add rust-analyzer runnables support Implemented rust-analyzer inlay hints Support pyenv for pyls Add clang-tidy specific Flycheck error explainer for the lsp checker Improve lsp-mode completion performance by supressing non completion related features when completion is active. lsp-json: Enable formatter provider Accomodate the new :end-column and :end-column from flycheck Implement status bar for diagnostics lsp-diagnostics-modeline-mode Auto install of the html-language-server Flycheck support for diagnostic tags (3.15 spec). Adding support for GDScript langauge server used view mode for metals doctor buffer add texlab as tex LSP server Started new set of integration tests without using ecukes Support \"only\" param when requesting code actions Add Perl-LanguageServer support add support robot-framework language server. Implement deferred semantic highlighting Change default transport for erlang ls to stdio dart language server moved into separate repo https://github.com/emacs-lsp/lsp-dart Activate flow language server if there is flow tag in file or .flowconfig in project Add purescript-language-server (#1596) Process the $/progress messages from LSP 3.15 Display the first line of MarkupContent in eldoc (#1607) Perform willSaveWaitUntil synchronously and with shorter timeout Display images when rendering markdown(usefull for latex language servers). Increase lsp-idle-delay to 0.5 Support bash language server glob pattern option (#1594) Use pagebreaks for lsp-describe-thing-at-point lsp-mode: Eliminate quadratic-time index-building for imenu. (#1616)","title":"Release 6.3"},{"location":"CHANGELOG/#release-62","text":"Support dynamic rename registration Add basic support for style semantic highlighting Added Haxe language server integration Add C#-support via Roslyn. Add emmy lua support Enable plugins in typescript language server. 1079 Provide support for Ada Language server Implement right click support in lsp-mode buffers. Added built-in support for Rust Analyzer . Added support for HDL Checker server to lsp-vhdl Added support for Terraform language server. Added support for R language server (#1182) Added support for passing environment variables to language servers (#1184) Speedup lsp-mode's JSONRPC processing (\\~2 times) Add cancel-token to lsp-request-async Implement unified way to handle recurring lsp features Added support for powershell language server. Implemented inlay hints for Rust Analyzer (thanks to brotzeit ). Implemented automatic installation for C# language server. Reimplemented textDocument/signatureHelp - now the signature is displayed in lv buffer. Cancel sync requests when presssing C-g during the request. Use c-basic-offset when in cc-mode . Add support for Crystal via scry (#1218). Implement textDocument/documentColor support.","title":"Release 6.2"},{"location":"CHANGELOG/#release-61","text":"","title":"Release 6.1"},{"location":"CHANGELOG/#support-for-new-languageslanguage-servers","text":"Kotlin Language Server (Thanks to Jon Carr) gopls Language Server for Go XML Language Server (lsp4xml) Hack (using HHVM ) Intelephense for PHP clojure-lsp for Clojure/ClojureScipt (Thanks to Dario Benedek Fazekas) elmLS for Elm (Thanks to Daniel-V) FsAutoComplete for F# (Thanks to Reed Mullanix) Added Erlang support via erlang ls Added Dockerfile support via dockerfile-language-server-nodejs","title":"Support for new languages/language servers:"},{"location":"CHANGELOG/#new-logging-options","text":"lsp-mode now logs to buffer *lsp-log* , instead of *Messages* . This can be controlled with the variable lsp-log-max (Thanks to Thomas Fini Hansen). If lsp-print-performance is non-nil, lsp-mode will log a corresponding performance trace to *lsp-log* for every message to and from the server. The variable lsp-print-io , when non-nil will cause lsp-mode to log all messages to and from the server to a unique *lsp-io* buffer for every project root. These logs can be saved to a file and viewed using the LSP Inspector .","title":"New logging options"},{"location":"CHANGELOG/#lsp-methods","text":"Add support for textDocument/prepareRename . If supported by the language server, all renaming operations will be tested for validity. Add support for file watches . Add support for CodeAction literals . Add API level support for folding ranges . Folding support for origami.el support is implemented by package lsp-origami . Support document links . This can be controlled using the variable lsp-enable-links . Support resource operations (edits sent from the language server can now create/modify/remove files and directories). Add support for workspace/configuration . Add new function lsp-disconnect . Added lsp-find-definition-mouse and bound to C-<down-mouse-1> Added lsp-extend-selection as a frontend of new LSP method textDocument/extendSelection","title":"LSP Methods"},{"location":"CHANGELOG/#other-changes","text":"Add project logo (thanks to Jon Carr). Created an integration test suite for lsp-mode (See directory features ). If available, using the native JSON API introduced in Emacs 27.1. Tramp implementation now uses TRAMP process instead of TCP sockets (Thanks to Karsten Patzwaldt). LSP autoconfiguration adds company-lsp to the list of comapny backends instead of overriding it. Add lsp-mode-map . Add menu bar entries for lsp-mode . Perform before save operations ( textDocument/willSaveWaitUntil ) asynchronously. imenu support is now handled asynchronously (Thanks to Dario Gjorgjevski). Added option :none for lsp-prefer-flymake , which disabled both Flymake and Flycheck support. Changed flymake to report the errors immediately after they arrive instead of waiting flymake to call lsp-mode . Add debounce when server does not support incremental updates. Add hook lsp-after-uninitialized-hook , which stores the list of functions called after a language server has been uninitialized. Add variable lsp-symbol-highlighting-skip-current , which lets the user skip the current symbol when a given symbol is being highlighted. Add variable lsp-enabled-clients , which lets users set which defined clients are allowed to be used. Support multiple signatures while displaying eldoc text. Add variable lsp-signature-render-all , which when non-nil forces lsp-mode to only show the current active signature. Expose configuration settings for various language servers. Language servers can now be disabled with the variable lsp-disabled-clients . Improved applying changes speed. Fixed xref support for emacs 27+ Implemented automatic installation for F# language server. Added Emacs 26.x to CI Fixed handling of stderr when running over TRAMP . Implemented support for running the language server in Docker container over local files.","title":"Other changes"},{"location":"CHANGELOG/#release-60","text":"lsp-mode now have single entry point lsp for all language and based on the major mode starts the corresponding language servers. Added flymake integration. lsp automatically enables and configures company-lsp , lsp-ui , yasnippet , or flymake if they are present so no additional configuration is needed except installing the packages. That behavior could be disabled by setting lsp-auto-configure to nil . lsp-mode ships with several predefined servers located in lsp-clients.el which does not require additional package. For the more complex Language Servers like Eclipse JDT , ccls , cquery and haskell we still require separate package due to relatively high code base. lsp-mode handles automatically server failures by asking the user whether he/she wants to restart the server. introduced new command lsp-describe-session which replaces the existing one lsp-capabilities . The command lists the folders that are part of the workspace and the servers that are associated with the corresponding folder. lsp-mode displays information about the running server and it's status in the modeline. lsp-define-stdio-client and lsp-define-tcp-client are replaced with lsp-register-client lsp rely on projectile or project.el now only for suggesting project root. Once you open new file in a project and start lsp it will provide several options(import project, blacklist project, select other directory root). Once you select a root it will be persisted and used for the next sessions. support for multiple language servers per single file and workspace. changed lsp-mode settings to more sensible defaults. Removed all synchronous calls from the server startup. Improved multi-folder support. added backends for: Bash, C++, CSS, Dart, Elixir, Fortran, Go, Groovy, HTML, Javascript/Typescript, Javascript/Typescript, Ocaml, PHP, Python, Ruby, Rust, Vue, Flow","title":"Release 6.0"},{"location":"gallery/","text":"Gallery # RUST Completion Typescript references using lsp-ui Debugging Python using dap-mode Call hierarchy via ccls Metals Doctor Semantic highlighting as provided by clangd (built from unreleased 10.0 branch). In this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as ~auto~) clang-tidy error explanations (from the clangd language server)","title":"Gallery"},{"location":"gallery/#gallery","text":"RUST Completion Typescript references using lsp-ui Debugging Python using dap-mode Call hierarchy via ccls Metals Doctor Semantic highlighting as provided by clangd (built from unreleased 10.0 branch). In this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as ~auto~) clang-tidy error explanations (from the clangd language server)","title":"Gallery"},{"location":"lsp-rust/","text":"LSP Rust # lsp-rust-server Choose LSP server (default is RLS) lsp-rust-switch-server Switch priorities of lsp servers RLS # Customization # This is an incomplete list of the available options lsp-rust-rls-server-command change command to start RLS lsp-rust-show-hover-context turn off hover tooltips rust-analyzer # Customization # lsp-rust-analyzer-server-command change command to start rust-analyzer lsp-rust-analyzer-server-display-inlay-hints toggle inlay hints lsp-rust-analyzer-display-chaining-hints show inlay type hints for method chains lsp-rust-analyzer-display-parameter-hints show function parameter name inlay hints at the call site lsp-rust-analyzer-max-inlay-hint-length max inlay hint length lsp-rust-analyzer-cargo-watch-enable toggle cargo watch lsp-rust-analyzer-cargo-watch-command cargo watch command, e.g. check or clippy lsp-rust-analyzer-cargo-watch-args extra args passed to cargo watch command, should be specified as a vector of strings lsp-rust-analyzer-use-client-watching toggle client side watching lsp-rust-analyzer-cargo-all-targets should run cargo watch for all targets or not lsp-rust-analyzer-exclude-globs a list of glob patterns for Cargo package exclusion lsp-rust-analyzer-enabled-feature-flags a list of feature flags that should be enabled lsp-rust-analyzer-lru-capacity Number of syntax trees rust-analyzer keeps in memory lsp-rust-analyzer-cargo-override-command Advanced option, fully override the command rust-analyzer uses for checking. The command should include --message=format=json or similar option Commands # lsp-rust-analyzer-syntax-tree # Display syntax tree for current buffer lsp-rust-analyzer-status # Display status information for rust-analyzer lsp-rust-analyzer-join-lines # Join selected lines into one, smartly fixing up whitespace and trailing commas before: after: inlay-hints # lsp-rust-analyzer-inlay-hints-mode enables displaying of inlay hints NOTE: the inlay hints interact badly with the lsp-ui sideline, because it doesn't seem to consider the overlays in its width calculation, which often leads to lines wrapping around. Macro expansion # lsp-rust-analyzer-expand-macro expand macro call at point recursively Use your own function for displaying macro expansion by customizing lsp-rust-analyzer-macro-expansion-method Formatted and highlighted result with the default function of rustic. auto-import # Get a list of possible auto import candidates with lsp-execute-code-action Caveats # Rust Analyzer does not support disabling snippets - https://github.com/rust-analyzer/rust-analyzer/issues/2518","title":"Rust"},{"location":"lsp-rust/#lsp-rust","text":"lsp-rust-server Choose LSP server (default is RLS) lsp-rust-switch-server Switch priorities of lsp servers","title":"LSP Rust"},{"location":"lsp-rust/#rls","text":"","title":"RLS"},{"location":"lsp-rust/#customization","text":"This is an incomplete list of the available options lsp-rust-rls-server-command change command to start RLS lsp-rust-show-hover-context turn off hover tooltips","title":"Customization"},{"location":"lsp-rust/#rust-analyzer","text":"","title":"rust-analyzer"},{"location":"lsp-rust/#customization_1","text":"lsp-rust-analyzer-server-command change command to start rust-analyzer lsp-rust-analyzer-server-display-inlay-hints toggle inlay hints lsp-rust-analyzer-display-chaining-hints show inlay type hints for method chains lsp-rust-analyzer-display-parameter-hints show function parameter name inlay hints at the call site lsp-rust-analyzer-max-inlay-hint-length max inlay hint length lsp-rust-analyzer-cargo-watch-enable toggle cargo watch lsp-rust-analyzer-cargo-watch-command cargo watch command, e.g. check or clippy lsp-rust-analyzer-cargo-watch-args extra args passed to cargo watch command, should be specified as a vector of strings lsp-rust-analyzer-use-client-watching toggle client side watching lsp-rust-analyzer-cargo-all-targets should run cargo watch for all targets or not lsp-rust-analyzer-exclude-globs a list of glob patterns for Cargo package exclusion lsp-rust-analyzer-enabled-feature-flags a list of feature flags that should be enabled lsp-rust-analyzer-lru-capacity Number of syntax trees rust-analyzer keeps in memory lsp-rust-analyzer-cargo-override-command Advanced option, fully override the command rust-analyzer uses for checking. The command should include --message=format=json or similar option","title":"Customization"},{"location":"lsp-rust/#commands","text":"","title":"Commands"},{"location":"lsp-rust/#lsp-rust-analyzer-syntax-tree","text":"Display syntax tree for current buffer","title":"lsp-rust-analyzer-syntax-tree"},{"location":"lsp-rust/#lsp-rust-analyzer-status","text":"Display status information for rust-analyzer","title":"lsp-rust-analyzer-status"},{"location":"lsp-rust/#lsp-rust-analyzer-join-lines","text":"Join selected lines into one, smartly fixing up whitespace and trailing commas before: after:","title":"lsp-rust-analyzer-join-lines"},{"location":"lsp-rust/#inlay-hints","text":"lsp-rust-analyzer-inlay-hints-mode enables displaying of inlay hints NOTE: the inlay hints interact badly with the lsp-ui sideline, because it doesn't seem to consider the overlays in its width calculation, which often leads to lines wrapping around.","title":"inlay-hints"},{"location":"lsp-rust/#macro-expansion","text":"lsp-rust-analyzer-expand-macro expand macro call at point recursively Use your own function for displaying macro expansion by customizing lsp-rust-analyzer-macro-expansion-method Formatted and highlighted result with the default function of rustic.","title":"Macro expansion"},{"location":"lsp-rust/#auto-import","text":"Get a list of possible auto import candidates with lsp-execute-code-action","title":"auto-import"},{"location":"lsp-rust/#caveats","text":"Rust Analyzer does not support disabling snippets - https://github.com/rust-analyzer/rust-analyzer/issues/2518","title":"Caveats"}]}